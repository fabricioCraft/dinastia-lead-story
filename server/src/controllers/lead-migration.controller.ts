import { Controller, Post, Get, Logger } from '@nestjs/common';
import { LeadMigrationService } from '../services/lead-migration.service';
import { LeadStageHistoryService } from '../services/lead-stage-history.service';

@Controller('lead-migration')
export class LeadMigrationController {
  private readonly logger = new Logger(LeadMigrationController.name);

  constructor(
    private readonly leadMigrationService: LeadMigrationService,
    private readonly leadStageHistoryService: LeadStageHistoryService,
  ) {}

  /**
   * Executa a migra√ß√£o inicial de todos os leads existentes do Kommo
   * para o sistema de hist√≥rico de est√°gios
   */
  @Post('initialize-history')
  async initializeLeadHistory() {
    this.logger.log('üöÄ Iniciando migra√ß√£o de hist√≥rico de leads...');
    
    try {
      const result = await this.leadMigrationService.migrateExistingLeads();
      
      this.logger.log('‚úÖ Migra√ß√£o conclu√≠da com sucesso');
      return {
        success: true,
        message: 'Migra√ß√£o de hist√≥rico de leads conclu√≠da com sucesso',
        data: result
      };
    } catch (error) {
      this.logger.error('‚ùå Erro durante a migra√ß√£o:', error);
      return {
        success: false,
        message: 'Erro durante a migra√ß√£o de hist√≥rico de leads',
        error: error.message
      };
    }
  }

  /**
   * Obt√©m estat√≠sticas do hist√≥rico de est√°gios
   */
  @Get('history-stats')
  async getHistoryStats() {
    try {
      const stats = await this.leadStageHistoryService.getHistoryStats();
      
      return {
        success: true,
        data: stats
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao obter estat√≠sticas:', error);
      return {
        success: false,
        message: 'Erro ao obter estat√≠sticas do hist√≥rico',
        error: error.message
      };
    }
  }

  /**
   * Obt√©m o tempo m√©dio por est√°gio
   */
  @Get('average-time-per-stage')
  async getAverageTimePerStage() {
    try {
      const averageTimes = await this.leadStageHistoryService.getAverageTimePerStage();
      
      return {
        success: true,
        data: averageTimes
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao calcular tempo m√©dio por est√°gio:', error);
      return {
        success: false,
        message: 'Erro ao calcular tempo m√©dio por est√°gio',
        error: error.message
      };
    }
  }

  /**
   * Obt√©m o hist√≥rico completo de um lead espec√≠fico
   */
  @Get('lead-history/:leadId')
  async getLeadHistory(leadId: string) {
    try {
      const history = await this.leadStageHistoryService.getLeadHistory(parseInt(leadId));
      
      return {
        success: true,
        data: history
      };
    } catch (error) {
      this.logger.error(`‚ùå Erro ao obter hist√≥rico do lead ${leadId}:`, error);
      return {
        success: false,
        message: `Erro ao obter hist√≥rico do lead ${leadId}`,
        error: error.message
      };
    }
  }
}